name: Offline Download
on:
  workflow_dispatch:
    inputs:
      clear:
        type: choice
        description: '是否清理 清理最大支持46G，不清理仅有22G'
        required: false
        options: [true, false]
        default: true
      BT:
        description: '磁力链接或文件直链'
        required: false
      HTTP:
        description: '种子下载直链链接'
        required: false
      Tool:
        type: choice
        description: '下载器'
        required: true
        options: [aria, transmission]
        default: aria
      tracker:
        type: choice
        description: 'aria是否自定义tracker'
        required: true
        options: [true, false]
        default: true
      choice:
        description: 'aria BT文件选择 注意示例，只支持种子例: 2,4,5,10,12或 1-34'
        required: false
      Seed:
        type: choice
        description: 'aria 自定义播种时间(min) 0为不播种，建议播种，人人为我我为人人'
        required: true
        options: [0, 60, 120, 180, 240, 300]
        default: 60

      UploadDisk:
        type: choice
        description: '阿里云盘或Onedrive'
        required: true
        options: [Aliyun, Onedrive]
        default: Aliyun
      OnedriveDir:
        description: 'Onedrive自定义上传路径'
        required: false

jobs:
  OfflineDownload:
    runs-on: ubuntu-latest
    steps:
      - name: Space cleanup
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          if [[ "${{ inputs.clear }}" == *true* ]]; then
            df -h
            docker rmi `docker images -q`
            sudo -E rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d /usr/local/lib/android
            sudo -E apt update
            sudo -E apt -y purge azure-cli* docker* ghc* zulu* llvm* firefox google* dotnet* powershell* openjdk* mysql* php* mongodb* dotnet* snap*
            sudo apt autoremove
            sudo apt autoclean
            sudo apt clean
            sudo rm /var/log/*.log
            sudo rm -rf /tmp/*
            sudo -E systemctl daemon-reload
            sudo -E apt -y autoremove --purge
            sudo -E apt clean
            df -h
          else
            df -h
          fi
      - uses: actions/checkout@v3
      - name: Download
        run: |
          mkdir Server_Upload
          cd Server_Upload
          if [ -n "${{ github.event.inputs.BT }}" ]; then
            if [[ "${{ inputs.Tool }}" == *aria* ]]; then
              sudo apt install -y aria2
              if [[ "${{ inputs.tracker }}" == *true* ]]; then
                echo -e "${INFO} Update BT trackers for Aria2" && echo
                bash ${{ github.workspace }}/aria/tracker.sh ${{ github.workspace }}/aria/tracker_list.txt
                aria2c '${{ github.event.inputs.BT }}' --bt-tracker="$(cat "${{ github.workspace }}/aria/tracker_list.txt" | tr '\n' ',' | sed 's/,$//')" --seed-time=${{ github.event.inputs.Seed }} -s 64 -x 16
              else
                aria2c '${{ github.event.inputs.BT }}' --seed-time=${{ github.event.inputs.Seed }} -s 64 -x 16
              fi
            else
              sudo apt install -y transmission-cli
              transmission-cli "${{ github.event.inputs.BT }}"
            fi
          else
            if [[ "${{ inputs.Tool }}" == *aria* ]]; then
              sudo apt install -y aria2
              wget "${{ github.event.inputs.HTTP }}" -O 1.torrent
              if [[ "${{ inputs.tracker }}" == *true* ]]; then
                echo -e "${INFO} Update BT trackers for Aria2" && echo
                bash ${{ github.workspace }}/aria/tracker.sh ${{ github.workspace }}/aria/tracker_list.txt
                if [ -n "${{ github.event.inputs.choice }}" ]; then
                  aria2c 1.torrent --bt-tracker="$(cat "${{ github.workspace }}/aria/tracker_list.txt" | tr '\n' ',' | sed 's/,$//')" --seed-time=${{ github.event.inputs.Seed }} -s 64 -x 16 --select-file=${{ github.event.inputs.choice }}
                else
                  aria2c 1.torrent --bt-tracker="$(cat "${{ github.workspace }}/aria/tracker_list.txt" | tr '\n' ',' | sed 's/,$//')" --seed-time=${{ github.event.inputs.Seed }} -s 64 -x 16
                fi 
              else
                if [ -n "${{ github.event.inputs.choice }}" ]; then
                  aria2c 1.torrent --seed-time=${{ github.event.inputs.Seed }} -s 64 -x 16 --select-file=${{ github.event.inputs.choice }}
                else
                  aria2c 1.torrent --seed-time=${{ github.event.inputs.Seed }} -s 64 -x 16
                fi
              fi
            else
              sudo apt install -y transmission-cli
              transmission-cli "${{ github.event.inputs.HTTP }}"
            fi
          fi
          ls
          rm -rf 1.torrent
          rm -rf *.aria2
          ls
          df -h
      - name: Upload
        run: |
          ls
          if [[ "${{ inputs.UploadDisk }}" == *Aliyun* ]]; then
            cd ${{ github.workspace }}/aliyunpan-v0.2.8-linux-amd64
            ./aliyunpan login -RefreshToken=${{ secrets.ALIYUNTOKEN }}
            ./aliyunpan upload ${{ github.workspace }}/Server_Upload /影视
            ./aliyunpan logout -y
          else
            cd OnedriveCli
            mv ${{ github.workspace }}/Server_Upload ${{ github.workspace }}/OnedriveCli
            chmod +x OneDriveUploader
            if [ -n "${{ github.event.inputs.OnedriveDir }}" ]; then
              ./OneDriveUploader -s "Server_Upload" -r "${{ github.event.inputs.OnedriveDir }}"
            else
              ./OneDriveUploader -s "Server_Upload"
            fi  
          fi
